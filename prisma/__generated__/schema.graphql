type Image implements Node {
  id: ID!
  url: String!
}

type Mini implements Node {
  id: ID!
  monsters: [Monster!]!
  name: String!
  quantity: Int!
  size: String!
  subType: String
  type: String!
}

input MiniSort {
  column: MiniSortColumn
  direction: SortDirection
}

enum MiniSortColumn {
  name
  size
  subType
  type
}

type Monster implements Node {
  id: ID!
  image: Image!
  minis: [Mini!]!
  name: String!
  sheetType: String!
  sheetUrl: String!
  size: String!
  subType: String
  type: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  minis(after: String, before: String, first: Int, last: Int, search: String, sort: MiniSort): QueryMinisConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type QueryMinisConnection {
  edges: [QueryMinisConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryMinisConnectionEdge {
  cursor: String!
  node: Mini!
}

enum SortDirection {
  asc
  desc
}